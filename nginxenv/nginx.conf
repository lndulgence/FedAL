worker_processes 1;

events {
  worker_connections 2048; # increase if you have lots of clients
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
  use epoll;#to enable for Linux 2.6+
}

http {
  include mime.types;
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream api {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    #server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    server api:8080 fail_timeout=0;
  }

    upstream apidptm {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    #server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    server apidptm:8080 fail_timeout=0;
  }
    map_hash_max_size 4096;
    map $http_apikey $api_client_name{

        default "";
        "keytotal" 1;
        "keydeprueba" 0.8;
        "keylimitada" 0.2;
}

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80;
    listen 443 ssl http2;
    ssl_certificate /etc/nginx/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/nginx-selfsigned.key;
    server_name api;

    location /dptm/documentation {
      rewrite /dptm/(.*) /$1  break;
      proxy_pass http://apidptm;
    }

    location /dptm/openapi.json {
      proxy_pass http://apidptm;
    }

    location /dptm/{
      auth_request /_validate_apikey;
      proxy_set_header r_limit $api_client_name;
      rewrite /dptm/(.*) /$1  break;
      
      proxy_pass http://apidptm;
    }

    location /dtm/documentation {
      rewrite /dtm/(.*) /$1  break;
      proxy_pass http://api;
    }

    location /dtm/openapi.json {
      proxy_pass http://api;
    }


    location /dtm/{
      auth_request /_validate_apikey;
      proxy_set_header r_limit $api_client_name;
      rewrite /dtm/(.*) /$1  break;
      proxy_pass http://api;
    }



     location = /_validate_apikey {
        internal;

        if ($http_apikey = "") {
            return 401; # Unauthorized
        }
        if ($api_client_name = "") {
            return 403; # Forbidden
        }

        return 204; # OK (no content)
    }


      location = /dtm/_validate_apikey {
        internal;

        if ($http_apikey = "") {
            return 401; # Unauthorized
        }
        if ($api_client_name = "") {
            return 403; # Forbidden
        }

        return 204; # OK (no content)
    }

      location = /dptm/_validate_apikey {
        internal;

        if ($http_apikey = "") {
            return 401; # Unauthorized
        }
        if ($api_client_name = "") {
            return 403; # Forbidden
        }

        return 204; # OK (no content)
    }

  }

  server {
    # use '' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    client_max_body_size 4G;
    listen 80 deferred;
    # set the correct host(s) for your site
    server_name api ;

    keepalive_timeout 5;

    # path for static files

    location / {
      # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
        if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' 'localhost' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }

    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://api;
    }
    #listen 443 ssl;
    #error_page 500 502 503 504 /500.html;
    #location = /500.html {
    #  root /path/to/app/current/public;
    #}


}

  server {
    if ($host = api.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name api.domain.com;
    return 404; # managed by Certbot

}}
